{
    // Place your snippets for javascript here. Each snippet is defined under a snippet name and has a prefix, body and
    // description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the
    // same ids are connected.
    // Example:
    // "Print to console": {
    // 	"prefix": "log",
    // 	"body": [
    // 		"console.log('$1');",
    // 		"$2"
    // 	],
    // 	"description": "Log output to console"
    // }
    "Prettierrc": {
        "prefix": "prett",
        "body": [
            "{",
            "  \"arrowParens\": \"always\",",
            "  \"bracketSpacing\": true,",
            "  \"endOfLine\": \"auto\",",
            "  \"jsxSingleQuote\": false,",
            "  \"semi\": true,",
            "  \"singleQuote\": false,",
            "  \"tabWidth\": 2,",
            "  \"useTabs\": false,",
            "  \"printWidth\": 80,",
            "  \"trailingComma\": \"all\"",
            "}",
        ],
        "description": ""
    },
    "Fake: Async Latency": {
        "prefix": "alat",
        "body": "new Promise((resolve) => setTimeout(resolve, $1));",
        "description": "A simple Asynchronous Function to Make Little Latency."
    },
    "Payload Template": {
        "prefix": "getpay",
        "body": [
            "export const payload = {",
            "success: {",
            "default: {},",
            "},",
            "failure: {",
            "default: {",
            "error: 'error.get.msw',",
            "errorMessage: 'Something Went Wrong'",
            "},",
            "},",
            "};"
        ],
        "description": "A simple Asynchronous Function to Make Little Latency."
    }
}
